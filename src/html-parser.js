module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = null,
        peg$c2 = function(dt, st) {
            var doct = null;
            if (dt !== null) {
              if (dt.error != null) {
                return error(dt.error);
              }
              doct = dt.value;
            }
            return {
              'doctype': doct,
              'document': st
            };
          },
        peg$c3 = { type: "other", description: "HTML DOCTYPE" },
        peg$c4 = [],
        peg$c5 = void 0,
        peg$c6 = { type: "any", description: "any character" },
        peg$c7 = /^[a-zA-Z]/,
        peg$c8 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c9 = ">",
        peg$c10 = { type: "literal", value: ">", description: "\">\"" },
        peg$c11 = function(ls, dt, ex) { return _u.tagify(dt) === 'doctype'; },
        peg$c12 = function(ls, dt, ex) {
            if (ls === null || _u.textNode(ls) === '') {
              if (_u.tagify(ex) === 'html') {
                return {
                  'value': _u.tagify(ex)
                };
              }
              return {
                'error': "The " + esc('DOCTYPE') +
                         " definition for an HTML 5 document should be " + esc.val('html')
              };
            }
            return {
              'error': "The " + esc('DOCTYPE') +
                       " definition must be placed at the beginning of the first line of the document"
            };
          },
        peg$c13 = "<!",
        peg$c14 = { type: "literal", value: "<!", description: "\"<!\"" },
        peg$c15 = "<",
        peg$c16 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c17 = "iframe",
        peg$c18 = { type: "literal", value: "iframe", description: "\"iframe\"" },
        peg$c19 = { type: "other", description: "Content" },
        peg$c20 = function(c) { return c; },
        peg$c21 = { type: "other", description: "Node" },
        peg$c22 = function(n) { return n; },
        peg$c23 = { type: "other", description: "Node Types" },
        peg$c24 = { type: "other", description: "Comment Node Types" },
        peg$c25 = { type: "other", description: "HTML Tag" },
        peg$c26 = { type: "other", description: "IFRAME Element" },
        peg$c27 = function(iot, ic, ict) { return _u.has(['iframe'], iot.name); },
        peg$c28 = function(iot, ic, ict) { return ict === null || iot.name === ict.name; },
        peg$c29 = function(iot, ic, ict) {
            var err;
            if ((err = validateSpecialTag(iot, ic, ict)) !== true) {
              return error(err.error);
            } else if ((err = isValidChildren(iot.name, iot.attributes, ic)) !== true) {
              return error(err.error);
            }
            return {
              'type': iot.name,
              'attributes': iot.attributes,
              'contents': ic
            };
          },
        peg$c30 = { type: "other", description: "Non-parsed Element" },
        peg$c31 = function(sot, sc, sct) { return _u.has(['script', 'style', 'title'], sot.name); },
        peg$c32 = function(sot, sc, sct) {
            var err;
            if ((err = validateSpecialTag(sot, sc, sct)) !== true) {
              return error(err.error);
            } else if ((err = isValidChildren(sot.name, sot.attributes, sc)) !== true) {
              return error(err.error);
            }
            return {
              'type': sot.name,
              'attributes': sot.attributes,
              'contents': sc
            };
          },
        peg$c33 = function(st, attrs) {
            return {
              'name': st,
              'attributes': _u.collapse(attrs)
            };
          },
        peg$c34 = /^[a-z]/,
        peg$c35 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c36 = function(st) { return ['script', 'style', 'title', 'iframe'].indexOf(_u.tagify(st)) !== -1; },
        peg$c37 = function(st) { return _u.tagify(st); },
        peg$c38 = function(scs) { return scs; },
        peg$c39 = "</",
        peg$c40 = { type: "literal", value: "</", description: "\"</\"" },
        peg$c41 = function(cs) { return _u.scriptify(cs);  },
        peg$c42 = "/",
        peg$c43 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c44 = function(sc) {
            return {
              'name': sc
            };
          },
        peg$c45 = { type: "other", description: "Tag" },
        peg$c46 = function(otn, sp, c, ctn) { return !isSelfClosing(otn.name) /* || otn.name === ctn.name */; },
        peg$c47 = function(otn, sp, c, ctn) {
            var err, attrs, parts = [];
            if (!otn.back) {
                return error("The " + esc(otn.name) + " element is missing part of its opening tag");
            } else if(!(ctn.front && ctn.back)) {
              // TODO: Find another solution without displaying unencoded brackets
              // if (!ctn.front) { parts.push('</'); }
              // if (!ctn.back) { parts.push('>'); }
              // return error("The <" + otn.name + "> tag is missing part (" + parts.join(', ') + ") of its closing tag");
              return error("The " + esc(otn.name) + " element is missing part of its closing tag");
            } else if (otn.name !== ctn.name) {
              return error("Expected open tag " + esc(otn.name) + " to match closing tag " + esc(ctn.name) + "");
            } /*else if (isSelfClosing(otn.name)) {
              return error("The " + esc(otn.name) + " tag is a void element and should not have a closing tag");
            }*/ else if (_u.has(attrs = checkAttributes(otn.name, otn.attributes, c), 'error')) {
              return error(attrs.error);
            } else if ((err = isValidChildren(otn.name, otn.attributes, c)) !== true) {
              return error(err.error);
            }
            return {
              'type': 'element',
              'void': false,
              'name': otn.name,
              'attributes': otn.attributes,
              'children': c
            };
          },
        peg$c48 = { type: "other", description: "Self-closing Tag" },
        peg$c49 = function(ot) {
            var attrs;
            if (!ot.back) {
              return error("The " + esc(ot.name) + " element is missing part of its opening tag");
            } else if(!isSelfClosing(ot.name)) {
              return error("" + esc(ot.name) + "" + " is not a valid self closing tag");
            }

            if (false && ot.closing !== null) {
              /*
              TODO: Note - This is where you would toggle on/off the error thrown when using the XHTML
                    method of a self-closing tag.
              */
              return error("The XHTML self-closing tag format for " + esc(ot.name) + " is not allowed in HTML 5");
            } else if (_u.has(attrs = checkAttributes(ot.name, ot.attributes), 'error')) {
              return error(attrs.error);
            }

            return {
              'type': 'element',
              'void': true,
              'name': ot.name,
              'attributes': ot.attributes,
              'children': []
            };
            // return "<" + ot + ">";
          },
        peg$c50 = { type: "other", description: "Opening Tag" },
        peg$c51 = function(t, attrs, cl, e) {
            return {
              'name': t,
              'attributes': _u.collapse(attrs),
              'closing': cl,
              'back': e !== null
            };
          },
        peg$c52 = { type: "other", description: "Closing Tag" },
        peg$c53 = function(o, t, c) {
            return {
              'name': t,
              'front': o !== null,
              'back': c !== null
            };
          },
        peg$c54 = { type: "other", description: "Tag Name" },
        peg$c55 = /^[A-Za-z]/,
        peg$c56 = { type: "class", value: "[A-Za-z]", description: "[A-Za-z]" },
        peg$c57 = /^[0-9A-Z_a-z\-]/,
        peg$c58 = { type: "class", value: "[0-9A-Z_a-z\\-]", description: "[0-9A-Z_a-z\\-]" },
        peg$c59 = function(tns, tne) { return _u.tagify([tns].concat(tne)); },
        peg$c60 = { type: "other", description: "Attribute" },
        peg$c61 = function(ta, t) {
            return {
              'name': ta,
              'value': t
            };
          },
        peg$c62 = { type: "other", description: "Attribute Name" },
        peg$c63 = /^[=\/\\ ]/,
        peg$c64 = { type: "class", value: "[=\\/\\\\ ]", description: "[=\\/\\\\ ]" },
        peg$c65 = function(n) { return n.length; },
        peg$c66 = function(n) { return _u.tagify(n); },
        peg$c67 = { type: "other", description: "Attribute Value (Double Quoted)" },
        peg$c68 = "\"",
        peg$c69 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c70 = /^[^"]/,
        peg$c71 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c72 = function(v) { return { 'value': _u.textNode(v), 'unquoted': false }; },
        peg$c73 = /^[s]/,
        peg$c74 = { type: "class", value: "[s]", description: "[s]" },
        peg$c75 = function(v) { return { 'value': '', 'unquoted': false }; },
        peg$c76 = { type: "other", description: "Attribute Value (Single Quoted)" },
        peg$c77 = "'",
        peg$c78 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c79 = /^[^']/,
        peg$c80 = { type: "class", value: "[^']", description: "[^']" },
        peg$c81 = { type: "other", description: "Attribute Value (Unquoted)" },
        peg$c82 = /^[^ >]/,
        peg$c83 = { type: "class", value: "[^ >]", description: "[^ >]" },
        peg$c84 = function(v) { return { 'value': _u.textNode(v), 'unquoted': true }; },
        peg$c85 = { type: "other", description: "Attribute Value" },
        peg$c86 = { type: "other", description: "Attribute Assignment" },
        peg$c87 = "=",
        peg$c88 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c89 = function(i) {
            // NOTE: equal sign in <meta> tag attribute values, quotes in <style> tags
            var matches, disallowed;
            if(i == null) {
              return error("Found an attribute assignment " + esc.val('=') + " not followed by a value");
            } else {
              // TODO: Move this this check up to a place where tag name is available
              // TODO: & could be allowed in event attributes
              if (i.unquoted) {
                // Note: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state
                disallowed = /[ \f\n\r\t\v\/<>&"'`=]+/;
              } else {
                // Note: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state
                disallowed = /(&(?![^\s]+;)+)/;
              }
              if (disallowed.test(i.value)) {
                matches = i.value.match(disallowed);
                return error("Disallowed character " + esc.val(matches[0]) + " found in attribute value");
              }
            }
            return i.value;
          },
        peg$c90 = { type: "other", description: "Text Node" },
        peg$c91 = function(tn) {
          return {
            'type': 'text',
            'contents': _u.textNode(tn)
          };
        },
        peg$c92 = { type: "other", description: "Block Comment" },
        peg$c93 = function(com, cc) {
            if (cc === null) {
              return error('Found an open HTML comment tag without a closing tag');
            }
            return com;
          },
        peg$c94 = { type: "other", description: "Comment Start" },
        peg$c95 = "<!--",
        peg$c96 = { type: "literal", value: "<!--", description: "\"<!--\"" },
        peg$c97 = { type: "other", description: "Comment Close" },
        peg$c98 = "-->",
        peg$c99 = { type: "literal", value: "-->", description: "\"-->\"" },
        peg$c100 = function(cb) {
            var tn = cb !== null ? _u.textNode(cb) : '';
            if(tn.indexOf('--') !== -1) {
              return error("Cannot have two or more consecutive hyphens " + esc.val('--') + " inside of a block comment");
            }
            return {
              'type': 'comment',
              'conditional': false,
              'condition': null,
              'children': {
                'type': 'text',
                'contents': tn
              }
            };
          },
        peg$c101 = function(cs) { return _u.textNode(cs);  },
        peg$c102 = function(cons, com, cone) { return cons === null && cone === null; },
        peg$c103 = function(cons, com, cone) {
            var condition = '';
            if (cone === null) {
              return error("Conditional comment start tag found without conditional comment end tag");
            } else if (cons === null) {
              return error("Conditional comment end tag found without conditional comment start tag");
            } else {
              condition = cons;
            }
            return {
              'type': 'comment',
              'conditional': true,
              'condition': condition,
              'children': com
            };
          },
        peg$c104 = "[",
        peg$c105 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c106 = /^[^\]]/,
        peg$c107 = { type: "class", value: "[^\\]]", description: "[^\\]]" },
        peg$c108 = "]>",
        peg$c109 = { type: "literal", value: "]>", description: "\"]>\"" },
        peg$c110 = function(csc) { return _u.tagify(csc); },
        peg$c111 = "endif",
        peg$c112 = { type: "literal", value: "endif", description: "\"endif\"" },
        peg$c113 = "]",
        peg$c114 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c115 = function() { return true; },
        peg$c116 = function(cs) { return _u.textNode(cs); },
        peg$c117 = { type: "other", description: "Anything" },
        peg$c118 = { type: "other", description: "Character" },
        peg$c119 = /^[^<>]/,
        peg$c120 = { type: "class", value: "[^<>]", description: "[^<>]" },
        peg$c121 = { type: "other", description: "Enforced Whitespace" },
        peg$c122 = { type: "other", description: "Optional Whitespace" },
        peg$c123 = { type: "other", description: "Whitespace" },
        peg$c124 = /^[ \f\n\r\t\x0B]/,
        peg$c125 = { type: "class", value: "[ \\f\\n\\r\\t\\x0B]", description: "[ \\f\\n\\r\\t\\x0B]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedoctype();
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecontent();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedoctype() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsedoctype_terminators();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c5;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsedoctype_terminators();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c5;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedoctype_start();
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c7.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c7.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parses();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsechar();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsechar();
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parses();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s7 = peg$c9;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s8 = peg$c11(s1, s3, s5);
                    if (s8) {
                      s8 = peg$c5;
                    } else {
                      s8 = peg$c0;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c12(s1, s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parsedoctype_start() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c13) {
        s0 = peg$c13;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }

      return s0;
    }

    function peg$parsedoctype_terminators() {
      var s0, s1, s2, s3;

      s0 = peg$parsedoctype_start();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
          s1 = peg$c15;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parses();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c17) {
              s3 = peg$c17;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecontent() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenode();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenode();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }

      return s0;
    }

    function peg$parsenode() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsenode_types();
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c22(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }

      return s0;
    }

    function peg$parsenode_types() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsetag();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecomment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetext_node();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }

      return s0;
    }

    function peg$parsecomment_nodes() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsetag();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetext_node();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }

      return s0;
    }

    function peg$parsetag() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseiframe_tag();
      if (s0 === peg$FAILED) {
        s0 = peg$parsespecial_tag();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenormal_tag();
          if (s0 === peg$FAILED) {
            s0 = peg$parseself_closing_tag();
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }

      return s0;
    }

    function peg$parseiframe_tag() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsespecial_tag_open();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestart();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsespecial_tag_close();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = peg$currPos;
            s4 = peg$c27(s1, s2, s3);
            if (s4) {
              s4 = peg$c5;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s5 = peg$c28(s1, s2, s3);
              if (s5) {
                s5 = peg$c5;
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c29(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      return s0;
    }

    function peg$parsespecial_tag() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsespecial_tag_open();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsespecial_tag_content();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsespecial_tag_close();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = peg$currPos;
            s4 = peg$c31(s1, s2, s3);
            if (s4) {
              s4 = peg$c5;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c32(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }

      return s0;
    }

    function peg$parsespecial_tag_open() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsespecial_tag_types();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsetag_attribute();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsetag_attribute();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parses();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s6 = peg$c9;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c33(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespecial_tag_types() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c34.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c34.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c36(s1);
        if (s2) {
          s2 = peg$c5;
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c37(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespecial_tag_content() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsespecial_tag_scan();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsespecial_tag_scan() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c39) {
        s4 = peg$c39;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c5;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsechar();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c39) {
          s4 = peg$c39;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c5;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsechar();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c41(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsespecial_tag_close() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c42;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parses();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsespecial_tag_types();
              if (s5 !== peg$FAILED) {
                s6 = peg$parses();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s7 = peg$c9;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c44(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenormal_tag() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseopen_tag();
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecontent();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseclose_tag();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = peg$currPos;
              s5 = peg$c46(s1, s2, s3, s4);
              if (s5) {
                s5 = peg$c5;
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c47(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }

      return s0;
    }

    function peg$parseself_closing_tag() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseopen_tag();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c49(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }

      return s0;
    }

    function peg$parseopen_tag() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetagname();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsetag_attribute();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsetag_attribute();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parses();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s6 = peg$c42;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c43); }
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parses();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s8 = peg$c9;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c10); }
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c1;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parses();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c51(s3, s4, s6, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }

      return s0;
    }

    function peg$parseclose_tag() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetagname();
          if (s3 !== peg$FAILED) {
            s4 = peg$parses();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s5 = peg$c9;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c53(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }

      return s0;
    }

    function peg$parsetagname() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c55.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c57.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c59(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }

      return s0;
    }

    function peg$parsetag_attribute() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsee();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetag_attribute_name();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_assignment();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c61(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }

      return s0;
    }

    function peg$parsetag_attribute_name() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parses();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (peg$c63.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c5;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsechar();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (peg$c63.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c5;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsechar();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c65(s2);
          if (s3) {
            s3 = peg$c5;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c66(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }

      return s0;
    }

    function peg$parsetag_attribute_value_dblquote() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsetag_attribute_value_dblquote_empty();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetag_attribute_value_dblquote_value();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }

      return s0;
    }

    function peg$parsetag_attribute_value_dblquote_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c68;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c70.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c70.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c71); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c68;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c72(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetag_attribute_value_dblquote_empty() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c68;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c73.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c73.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c68;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetag_attribute_value_singlequote() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsetag_attribute_value_singlequote_empty();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetag_attribute_value_singlequote_value();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }

      return s0;
    }

    function peg$parsetag_attribute_value_singlequote_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c77;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c79.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c79.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c77;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c72(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetag_attribute_value_singlequote_empty() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c77;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c73.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c73.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c77;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetag_attribute_value_noquote() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c82.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c82.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c84(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      return s0;
    }

    function peg$parsetag_attribute_value() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsetag_attribute_value_dblquote();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetag_attribute_value_singlequote();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetag_attribute_value_noquote();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }

      return s0;
    }

    function peg$parseattr_assignment() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parses();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c87;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parses();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetag_attribute_value();
            if (s4 === peg$FAILED) {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c89(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }

      return s0;
    }

    function peg$parsetext_node() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsechar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsechar();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c91(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsecomment_open();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomment_content();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomment_close();
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c93(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }

      return s0;
    }

    function peg$parsecomment_open() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c95) {
        s0 = peg$c95;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }

      return s0;
    }

    function peg$parsecomment_close() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c98) {
        s0 = peg$c98;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      return s0;
    }

    function peg$parsecomment_content() {
      var s0;

      s0 = peg$parsecomment_conditional();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecomment_block();
      }

      return s0;
    }

    function peg$parsecomment_block() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parses();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomment_scan();
        if (s2 !== peg$FAILED) {
          s3 = peg$parses();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c100(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecomment_scan() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsecomment_close();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c5;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseany();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsecomment_close();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c5;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseany();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c101(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomment_conditional_scan() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseconditional_end();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c5;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseany();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseconditional_end();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c5;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseany();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c41(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomment_conditional() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parses();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseconditional_start();
        if (s2 === peg$FAILED) {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parses();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecomment_conditional_scan();
            if (s4 !== peg$FAILED) {
              s5 = peg$parses();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseconditional_end();
                if (s6 === peg$FAILED) {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parses();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s8 = peg$c102(s2, s4, s6);
                    if (s8) {
                      s8 = peg$c0;
                    } else {
                      s8 = peg$c5;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c103(s2, s4, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconditional_start() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c104;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c106.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c106.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parses();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c108) {
                s5 = peg$c108;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c109); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c110(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseconditional_end() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parses();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s3 = peg$c104;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parses();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c111) {
                s5 = peg$c111;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c112); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parses();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s7 = peg$c113;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c114); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c115();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecomment_conditional_body() {
      var s0;

      s0 = peg$parseconditional_scan();

      return s0;
    }

    function peg$parseconditional_scan() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseconditional_terminator();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = peg$c5;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsechar();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseconditional_terminator();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c5;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsechar();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c116(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseconditional_terminator() {
      var s0;

      s0 = peg$parseconditional_end();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecomment_close();
      }

      return s0;
    }

    function peg$parseany() {
      var s0, s1;

      peg$silentFails++;
      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }

      return s0;
    }

    function peg$parsechar() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c119.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c118); }
      }

      return s0;
    }

    function peg$parsee() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parse_();
        }
      } else {
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }

      return s0;
    }

    function peg$parses() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      s1 = peg$parse_();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parse_();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c124.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }

      return s0;
    }


          // Parser utilities
      var _u = require('./html-parser-util'),
          esc = _u.escape,
          // Codex of tag and attribute names
          codex = require('./html-grammar-codex')(options);

      // Set error encoding
      _u.setFormat(codex);

      // Verification Functions

      function isSelfClosing(tag) {
        var path = 'tags/void',
            tags = _u.option(path, null, codex);
        return tags != null ? _u.customTest.apply(this, [path, tags, [tag]]) : false;
      }

      function isAttributeAllowed(tag, attribute, value) {
        var i, len, ref, shared, props,
            that = this,
            attrTest = function (tst) {
              return _u.customTest.apply(that, ['attributes/' + tst, props[tst], [attribute, value]]);
            };

        // Find the rules for this tag in the options
        props = _u.option('attributes', [tag, '_'], codex);

        // Do not continue unless attribute options exist for this tag
        if (props == null) { return true; }

        /*
          The tag is allowed if it:
          a) exists in normal and has any value,
          b) exists in void and has no value,
          c) exists in mixed and has any or no value
          d) exists in conditional if conditions are met
        */
        if (_u.has(props, 'normal') && attrTest('normal')) {
          if (value == null) {
            return {
              'error': "The " + esc(tag) + " tag " + esc.attr(attribute) +
                       " attribute requires a value"
            };
          }
          return true;
        } else if (_u.has(props, 'void') && attrTest('void')) {
          if (value != null) {
            return {
              'error': "The " + esc(tag) + " tag " + esc.attr(attribute) +
                       " attribute should not have a value"
            };
          }
          return true;
        } else if (_u.has(props, 'mixed') && attrTest('mixed')) {
          return true;
        } else if (_u.has(props, 'conditional') && attrTest('conditional')) {
          // Does not need to be evaluated further here
          return true;
        }

        return {
          'error': "The " + esc(tag) + " tag does not have a " +
                   esc.attr(attribute) + " attribute"
        };
      }

      function checkAttributes(tag, attributes, contents) {
        var i, len, ref, req, name, value, rule, props, ok = {
          'value': attributes
        }, names = Object.keys(attributes);

        // If there is any weird stuff in the names, do not continue
        for (i = 0, len = names.length; i < len; i++) {
          if (/[\/\>\"\'\= ]/.test(names[i])) {
            return {
              'error': 'The ' + esc(tag) + ' element has an attribute ' +
                       esc.attr(names[i]) + ' with an invalid name'
            };
          }
        }

        // If the tag is not in the codex then allow anything
        props = _u.option('attributes', [tag, '_'], codex);

        if (props == null) { return ok; }

        // Check if all the required attributes are present
        if (_u.has(props, 'required')) {
          ref = props['required'];
          for (i = 0, len = ref.length; i < len; i++) {
            req = ref[i];
            rule = _u.customTest.apply(this, ['attributes/required', req, [attributes, contents]]);
            if (rule !== true) {
              if (rule === false) {
                return {
                  'error': "The " + esc(tag) + " tag must include a " + esc.attr(req) +
                           " attribute"
                };
              } else {
                return rule;
              }
            }
          }
        }

        // Make sure each attribute is allowed validated
        for (name in attributes) {
          value = attributes[name];
          if ((err = isAttributeAllowed(tag, name, value)) !== true) {
            return err;
          }
        }

        // Run any custom validation rules that exist
        if (_u.has(props, 'rules') && props['rules'] != null) {
          rule = _u.customTest.apply(this, ['attributes/rules', props['rules'], [attributes, contents, _u, codex]]);
          if (_u.has(rule, 'error')) {
            return rule;
          }
        }

        // Check conditional attributes
        if (_u.has(props, 'conditional')) {
          ref = props['conditions'];
          for (i = 0, len = ref.length; i < len; i++) {
            if (_u.isFunc(ref[i]) && (rule = ref[i].apply(this, [attributes, _u, codex])) !== true) {
              return rule;
            }
          }
        }

        return ok;
      }

      function validateSpecialTag(sot, sc, sct) {
        var attrs = checkAttributes(sot.name, sot.attributes, sc);
        if (sct === null) {
          return {
            'error': "Found an open " + esc(sot.name) + " tag without a closing " +
                     esc(sot.name) + " tag"
          };
        } else if (sot.name !== sct.name) {
          return {
            'error': "Expected open tag " + esc(sot.name) + " to match closing tag " +
                     esc(sct.name) + ""
          };
        } else if (attrs.error != null) {
          return attrs;
        }
        return true;
      }


      // TODO: Is it possible to move this to the codex?
       function isValidChildren(tag, attributes, children) {
        /*
          Special rules apply for the position of certain elements in the document.
          We can look at the children for specific elements to determine if
          anything is in a place it is not allowed.
        */
        // TODO: Each of these needs a corresponding test
        var countTitle, countLink, countMeta;
        switch (tag) {
          case 'head':
            countTitle = _u.countWhere(children, {'type': 'title'});
            if (countTitle < 1) {
              return {
                'error': "The document will not validate as HTML if you omit the " +
                         esc('title') + " tag in the document " + esc('head') + " section"
              };
            } else if (countTitle > 1) {
              return {
                'error': "You can not have more than one " +
                         esc('title') + " element in an HTML document"
              };
            }
            break;
          default:
            if (_u.isArray(children) && children.length > 0) {
              countLink = _u.countWhere(children, {'type': 'element', 'name': 'link'});
              if (countLink > 0) {
                return {
                  'error': "The " + esc('link') + " element goes only in the " +
                           esc('head') + " section of an HTML document"
                };
              }
              countMeta = _u.countWhere(children, {'type': 'element', 'name': 'meta'});
              if (countMeta > 0) {
                return {
                  'error': "The " + esc('meta') + " element goes only in the " +
                           esc('head') + " section of an HTML document"
                };
              }
              // Process one level deep so that trace is as accurate as possible
              if (_u.find(children, function (child) {
                if (child['type'] === 'style' && !_u.has(child.attributes, 'scoped')) {
                  return true;
                }
                return false;
              }) !== undefined) {
                return {
                  'error': "If the " + esc.attr('scoped') + " attribute is not used, each " +
                           esc('style') + " tag must be located in the " +
                           esc('head') + " section"
                };
              }
            }
            break;
        }
        return true;
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
